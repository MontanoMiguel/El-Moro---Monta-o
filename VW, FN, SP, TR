-- =====================================
--        VISTAS (VW)
-- =====================================

CREATE OR REPLACE VIEW VW_Productos_Stock_Bajo AS
SELECT Nombre, Stock
FROM Producto
WHERE Stock < 15;

CREATE OR REPLACE VIEW VW_Ventas_Clientes AS
SELECT V.ID_Venta, C.Nombre AS Cliente, V.Fecha, V.Total
FROM Venta V
JOIN Cliente C ON V.ID_Cliente = C.ID_Cliente;

CREATE OR REPLACE VIEW VW_Productos_Mas_Caros AS
SELECT Nombre, Precio
FROM Producto
ORDER BY Precio DESC
LIMIT 5;

-- =====================================
--        FUNCIONES (FN)
-- =====================================

DELIMITER //

CREATE FUNCTION FN_CalcularSubtotal(precio DECIMAL(10,2), cantidad INT)
RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN
    RETURN precio * cantidad;
END;
//

CREATE FUNCTION FN_Stock_Disponible(idProd INT)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE stockActual INT;
    SELECT Stock INTO stockActual FROM Producto WHERE ID_Producto = idProd;
    RETURN stockActual;
END;
//

DELIMITER ;

-- =====================================
--   PROCEDIMIENTOS ALMACENADOS (SP)
-- =====================================

DELIMITER //

CREATE PROCEDURE SP_ActualizarStock (
    IN p_id_producto INT,
    IN p_cantidad INT
)
BEGIN
    UPDATE Producto
    SET Stock = Stock - p_cantidad
    WHERE ID_Producto = p_id_producto;
END;
//

CREATE PROCEDURE SP_ListarVentasPorCliente (
    IN p_id_cliente INT
)
BEGIN
    SELECT V.ID_Venta, V.Fecha, V.Total
    FROM Venta V
    WHERE V.ID_Cliente = p_id_cliente;
END;
//

DELIMITER ;

-- =====================================
--             TRIGGERS (TR)
-- =====================================

DELIMITER //

CREATE TRIGGER TR_ActualizarStockDespuesVenta
AFTER INSERT ON Detalle_Venta
FOR EACH ROW
BEGIN
    UPDATE Producto
    SET Stock = Stock - NEW.Cantidad
    WHERE ID_Producto = NEW.ID_Producto;
END;
//

CREATE TRIGGER TR_ActualizarTotalVenta
AFTER INSERT ON Detalle_Venta
FOR EACH ROW
BEGIN
    UPDATE Venta
    SET Total = Total + NEW.Subtotal
    WHERE ID_Venta = NEW.ID_Venta;
END;
//

DELIMITER ;
